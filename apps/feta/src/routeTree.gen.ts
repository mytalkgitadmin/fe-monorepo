/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as FeaturesRouteImport } from './routes/features'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as ProtectedSettingRouteImport } from './routes/_protected/setting'
import { Route as ProtectedNotificationsRouteImport } from './routes/_protected/notifications'
import { Route as ProtectedFriendsRouteImport } from './routes/_protected/friends'
import { Route as ProtectedChatListRouteImport } from './routes/_protected/chat-list'
import { Route as ProtectedChatRouteImport } from './routes/_protected/chat'

const FeaturesRoute = FeaturesRouteImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)
const ProtectedSettingRoute = ProtectedSettingRouteImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedNotificationsRoute = ProtectedNotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedFriendsRoute = ProtectedFriendsRouteImport.update({
  id: '/friends',
  path: '/friends',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedChatListRoute = ProtectedChatListRouteImport.update({
  id: '/chat-list',
  path: '/chat-list',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedChatRoute = ProtectedChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => ProtectedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/features': typeof FeaturesRoute
  '/chat': typeof ProtectedChatRoute
  '/chat-list': typeof ProtectedChatListRoute
  '/friends': typeof ProtectedFriendsRoute
  '/notifications': typeof ProtectedNotificationsRoute
  '/setting': typeof ProtectedSettingRoute
  '/login': typeof PublicLoginRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/features': typeof FeaturesRoute
  '/chat': typeof ProtectedChatRoute
  '/chat-list': typeof ProtectedChatListRoute
  '/friends': typeof ProtectedFriendsRoute
  '/notifications': typeof ProtectedNotificationsRoute
  '/setting': typeof ProtectedSettingRoute
  '/login': typeof PublicLoginRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/features': typeof FeaturesRoute
  '/_protected/chat': typeof ProtectedChatRoute
  '/_protected/chat-list': typeof ProtectedChatListRoute
  '/_protected/friends': typeof ProtectedFriendsRoute
  '/_protected/notifications': typeof ProtectedNotificationsRoute
  '/_protected/setting': typeof ProtectedSettingRoute
  '/_public/login': typeof PublicLoginRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/features'
    | '/chat'
    | '/chat-list'
    | '/friends'
    | '/notifications'
    | '/setting'
    | '/login'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/features'
    | '/chat'
    | '/chat-list'
    | '/friends'
    | '/notifications'
    | '/setting'
    | '/login'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_public'
    | '/features'
    | '/_protected/chat'
    | '/_protected/chat-list'
    | '/_protected/friends'
    | '/_protected/notifications'
    | '/_protected/setting'
    | '/_public/login'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  FeaturesRoute: typeof FeaturesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/features': {
      id: '/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof FeaturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_protected/setting': {
      id: '/_protected/setting'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof ProtectedSettingRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/notifications': {
      id: '/_protected/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof ProtectedNotificationsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/friends': {
      id: '/_protected/friends'
      path: '/friends'
      fullPath: '/friends'
      preLoaderRoute: typeof ProtectedFriendsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/chat-list': {
      id: '/_protected/chat-list'
      path: '/chat-list'
      fullPath: '/chat-list'
      preLoaderRoute: typeof ProtectedChatListRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/chat': {
      id: '/_protected/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ProtectedChatRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedChatRoute: typeof ProtectedChatRoute
  ProtectedChatListRoute: typeof ProtectedChatListRoute
  ProtectedFriendsRoute: typeof ProtectedFriendsRoute
  ProtectedNotificationsRoute: typeof ProtectedNotificationsRoute
  ProtectedSettingRoute: typeof ProtectedSettingRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedChatRoute: ProtectedChatRoute,
  ProtectedChatListRoute: ProtectedChatListRoute,
  ProtectedFriendsRoute: ProtectedFriendsRoute,
  ProtectedNotificationsRoute: ProtectedNotificationsRoute,
  ProtectedSettingRoute: ProtectedSettingRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface PublicRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  FeaturesRoute: FeaturesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
